/**
 * Script para atualizar todas as URLs de API de localhost para produ√ß√£o
 * 
 * Execute este script antes de fazer deploy para produ√ß√£o:
 * node scripts/update-api-urls.js
 * 
 * Isso ir√° substituir todas as ocorr√™ncias de localhost:3000 por api-backend-production-5b22.up.railway.app
 * e localhost:5173 por encontreluizantonio.com.br em todos os arquivos .svelte e .ts
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Configura√ß√£o para obter o diret√≥rio atual com ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configura√ß√µes
const sourceDir = path.join(__dirname, '../src');
const fileExtensions = ['.svelte', '.ts', '.js'];
const replacements = [
  { from: 'http://localhost:3000', to: 'https://api-backend-production-5b22.up.railway.app' },
  { from: 'http://localhost:5173', to: 'https://encontreluizantonio.com.br' }
];

// Contador para estat√≠sticas
const stats = {
  filesProcessed: 0,
  filesModified: 0,
  replacementsCount: 0
};

// Fun√ß√£o para processar um arquivo
function processFile(filePath) {
  try {
    // Ler o conte√∫do do arquivo
    let content = fs.readFileSync(filePath, 'utf8');
    let originalContent = content;
    let fileReplacementCount = 0;
    
    // Aplicar todas as substitui√ß√µes
    for (const replacement of replacements) {
      const regex = new RegExp(replacement.from.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g');
      const matches = content.match(regex);
      
      if (matches) {
        fileReplacementCount += matches.length;
        content = content.replace(regex, replacement.to);
      }
    }
    
    // Apenas escrever de volta no arquivo se houve altera√ß√µes
    if (content !== originalContent) {
      fs.writeFileSync(filePath, content, 'utf8');
      stats.filesModified++;
      stats.replacementsCount += fileReplacementCount;
      console.log(`‚úÖ Atualizado: ${filePath} (${fileReplacementCount} substitui√ß√µes)`);
    }
    
    stats.filesProcessed++;
  } catch (error) {
    console.error(`‚ùå Erro ao processar ${filePath}:`, error.message);
  }
}

// Fun√ß√£o para percorrer diret√≥rios recursivamente
function walkDirectory(dir) {
  const files = fs.readdirSync(dir);
  
  for (const file of files) {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory()) {
      // Ignore node_modules e diret√≥rios ocultos
      if (file !== 'node_modules' && !file.startsWith('.')) {
        walkDirectory(filePath);
      }
    } else if (stat.isFile() && 
              fileExtensions.includes(path.extname(filePath).toLowerCase())) {
      processFile(filePath);
    }
  }
}

// In√≠cio do script
console.log('üîÑ Iniciando atualiza√ß√£o de URLs...');
console.log(`üìÅ Processando diret√≥rio: ${sourceDir}`);

try {
  walkDirectory(sourceDir);
  
  console.log('\nüìä Resumo:');
  console.log(`   Arquivos processados: ${stats.filesProcessed}`);
  console.log(`   Arquivos modificados: ${stats.filesModified}`);
  console.log(`   Total de substitui√ß√µes: ${stats.replacementsCount}`);
  console.log('\n‚úÖ Processo conclu√≠do com sucesso!');
  
  if (stats.replacementsCount > 0) {
    console.log(`\n‚ö†Ô∏è  IMPORTANTE: Verifique as altera√ß√µes antes de fazer o deploy.`);
    console.log(`   Os seguintes padr√µes foram substitu√≠dos:`);
    for (const replacement of replacements) {
      console.log(`   - "${replacement.from}" ‚Üí "${replacement.to}"`);
    }
  } else {
    console.log(`\nüéâ Nenhuma substitui√ß√£o necess√°ria. Seu c√≥digo j√° est√° pronto para produ√ß√£o!`);
  }
} catch (error) {
  console.error(`\n‚ùå Erro durante o processamento:`, error.message);
  process.exit(1);
} 